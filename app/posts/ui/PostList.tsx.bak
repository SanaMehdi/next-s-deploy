'use client';

import { useEffect, useMemo, useState, useTransition } from 'react';
import { updatePost, deletePost } from '../actions';
import { Button } from '@/components/ui/button';
import { Card, CardContent } from '@/components/ui/card';
import { Input } from '@/components/ui/input';
import { Textarea } from '@/components/ui/textarea';
import { Badge } from '@/components/ui/badge';
import {
  Dialog, DialogContent, DialogFooter, DialogHeader, DialogTitle, DialogTrigger,
} from '@/components/ui/dialog';
import { toast } from '@/components/ui/use-toast';
import { getBrowserSupabase } from '@/lib/supabase/client';

type Post = { id: string; title: string; content: string; created_at: string; updated_at: string; };

export function PostList({ initialPosts }: { initialPosts: Post[] }) {
  const [editingId, setEditingId] = useState<string | null>(null);
  const [confirmDeleteId, setConfirmDeleteId] = useState<string | null>(null);
  const [isPending, startTransition] = useTransition();
  const [updated, setUpdated] = useState(false);
  const [posts, setPosts] = useState<Post[]>(initialPosts);

  const items = useMemo(() => posts, [posts]);

  // ðŸ”„ Realtime sync: INSERT / UPDATE / DELETE
  useEffect(() => {
    const supabase = getBrowserSupabase();

    const channel = supabase
      .channel('posts-realtime')
      .on(
        'postgres_changes',
        { event: '*', schema: 'public', table: 'posts' },
        (payload: any) => {
          setPosts((prev) => {
            if (payload.eventType === 'INSERT') {
              const incoming = payload.new as Post;
              // Add at top, avoid duplicates
              return [incoming, ...prev.filter((p) => p.id !== incoming.id)];
            }
            if (payload.eventType === 'UPDATE') {
              const incoming = payload.new as Post;
              return prev.map((p) => (p.id === incoming.id ? incoming : p));
            }
            if (payload.eventType === 'DELETE') {
              const gone = payload.old as Post;
              return prev.filter((p) => p.id !== gone.id);
            }
            return prev;
          });
        }
      )
      .subscribe();

    return () => {
      supabase.removeChannel(channel);
    };
  }, []);

  const save = (form: HTMLFormElement) =>
    startTransition(async () => {
      const fd = new FormData(form);
      try {
        await updatePost(fd);
        // optimistic refresh
        const id = String(fd.get('id'));
        setPosts(prev =>
          prev.map(p => p.id === id ? { ...p, title: String(fd.get('title')), content: String(fd.get('content')) } : p)
        );
        setEditingId(null);
        setUpdated(true);
        toast({ title: 'Updated' });
        setTimeout(() => setUpdated(false), 2500);
      } catch (e: any) {
        toast({ variant: 'destructive', title: e.message || 'Update failed' });
      }
    });

  const remove = () =>
    startTransition(async () => {
      if (!confirmDeleteId) return;
      try {
        const fd = new FormData();
        fd.set('id', confirmDeleteId);
        await deletePost(fd);
        setPosts((prev) => prev.filter((p) => p.id !== confirmDeleteId));
        setConfirmDeleteId(null);
        toast({ title: 'Deleted' });
      } catch (e: any) {
        toast({ variant: 'destructive', title: e.message || 'Delete failed' });
      }
    });

  if (items.length === 0) {
    return <p className="text-sm text-slate-500">â€”</p>;
  }

  return (
    <div className="space-y-3">
      {items.map((post) => (
        <Card key={post.id} className="border-slate-200">
          <CardContent className="p-4">
            {editingId === post.id ? (
              <form
                action={(fd) => save(fd as any)}
                className="space-y-2"
                onSubmit={(e) => {
                  e.preventDefault();
                  save(e.currentTarget);
                }}
              >
                <input type="hidden" name="id" value={post.id} />
                <Input name="title" defaultValue={post.title} />
                <Textarea name="content" defaultValue={post.content} rows={2} />
                <div className="flex gap-2">
                  <Button type="submit" disabled={isPending}>Save</Button>
                  <Button type="button" variant="secondary" onClick={() => setEditingId(null)}>Cancel</Button>
                </div>
              </form>
            ) : (
              <div className="flex items-start justify-between gap-3">
                <div className="space-y-1">
                  <div className="font-medium">{post.title}</div>
                  <div className="break-words text-sm text-slate-600">{post.content}</div>
                </div>
                <div className="flex shrink-0 items-center gap-2">
                  <Button variant="ghost" onClick={() => setEditingId(post.id)}>Edit</Button>
                  <Dialog
                    open={confirmDeleteId === post.id}
                    onOpenChange={(o) => setConfirmDeleteId(o ? post.id : null)}
                  >
                    <DialogTrigger asChild>
                      <Button variant="ghost">Delete</Button>
                    </DialogTrigger>
                    <DialogContent>
                      <DialogHeader>
                        <DialogTitle>Delete post?</DialogTitle>
                      </DialogHeader>
                      <p className="text-sm text-slate-600">This action cannot be undone.</p>
                      <DialogFooter className="gap-2">
                        <Button variant="secondary" onClick={() => setConfirmDeleteId(null)}>Cancel</Button>
                        <Button variant="destructive" onClick={remove} disabled={isPending}>Delete</Button>
                      </DialogFooter>
                    </DialogContent>
                  </Dialog>
                </div>
              </div>
            )}
          </CardContent>
        </Card>
      ))}

      {/* Bottom-right "Updated" badge */}
      <div className="flex justify-end">
        <div className="flex items-center gap-2">
          {updated && <Badge variant="secondary">Updated</Badge>}
        </div>
      </div>
    </div>
  );
}
