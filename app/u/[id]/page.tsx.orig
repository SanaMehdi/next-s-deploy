import { getServerSupabase } from '@/lib/supabase/server';
import { notFound } from 'next/navigation';
import { Avatar, AvatarFallback, AvatarImage } from '@/components/ui/avatar';
import { Button } from '@/components/ui/button';
import PostCard from '@/components/feed/PostCard';
import type { PostRow } from '@/lib/types';

export default async function UserProfilePage({ params }: { params: { id: string } }) {
  const supabase = getServerSupabase();

  // Fetch profile and post count in one go
  const { data: profile } = await supabase
    .from('profiles')
    .select('*, posts(count)')
    .eq('username', params.id)
    .single();

  if (!profile) {
    notFound();
  }

  // Get the currently logged-in user
  const { data: { user } } = await supabase.auth.getUser();

  // Fetch posts for this profile, using a structure similar to the main feed
  const { data: postsData = [] } = await supabase
    .from('posts')
    .select(`
      id, author_id, title, content, audience, created_at,
      author:profiles!posts_author_id_fkey (
        id, username, full_name, avatar_url
      ),
      comments:post_comments (
        id, post_id, user_id, content, created_at,
        user:profiles!post_comments_user_id_fkey (
          id, username, full_name, avatar_url
        )
      ),
      likes:post_likes (
        post_id, user_id
      )
    `)
    .eq('author_id', profile.id)
    .order('created_at', { ascending: false });

  // Supabase returns a to-one relationship as an array. We need to flatten it.
  const posts = (postsData as any[]).map(p => ({
    ...p,
    author: Array.isArray(p.author) ? p.author[0] : p.author
  }));

  const displayName = profile.full_name || profile.username;
  const fallback = (displayName || '?').charAt(0).toUpperCase();

  return (
    <div className="max-w-3xl mx-auto py-10 px-4">
      <div className="relative mb-16">
        <div className="h-48 bg-slate-200 rounded-t-2xl" />
        <div className="absolute -bottom-12 left-6">
          <Avatar className="w-24 h-24 border-4 border-white">
            <AvatarImage src={profile.avatar_url ?? undefined} />
            <AvatarFallback>{fallback}</AvatarFallback>
          </Avatar>
        </div>
      </div>

      <div className="bg-white rounded-b-2xl p-6 -mt-8 shadow-sm ring-1 ring-slate-200">
        <div className="flex items-center justify-between">
          <div>
            <h1 className="text-2xl font-bold">{displayName}</h1>
            <p className="text-slate-500">@{profile.username}</p>
          </div>
          <div>
            {user?.id === profile.id ? (
              <Button variant="outline">Edit Profile</Button>
            ) : (
              <Button>Follow</Button>
            )}
          </div>
        </div>
        <div className="mt-4 text-sm text-slate-600">
          <p>{(profile.posts[0] as any)?.count ?? 0} Posts</p>
        </div>
      </div>

      <div className="mt-8">
        <h2 className="text-xl font-semibold mb-4">Posts</h2>
        {posts.length > 0 ? (
          posts.map((p) => <PostCard key={p.id} post={p as PostRow} currentUserId={user?.id ?? null} />)
        ) : (
          <p className="text-slate-500">No posts yet.</p>
        )}
      </div>
    </div>
  );
}
